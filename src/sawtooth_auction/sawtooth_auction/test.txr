/**
 * Copyright 2017 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ------------------------------------------------------------------------------
 */
package main

import (
	"crypto/sha512"
	"encoding/hex"
	"fmt"
	state "github.com/moorada/sawtooth-sdk-go/examples/auction_go/src/sawtooth_auction/auction_state"
	"strings"
)

var Namespace = hexdigest("auction")[:6]
func main() {


	fmt.Println(makeAddress("1234dad"))
	fmt.Println(Sha512HashValue("auction")[:6]+Sha512HashValue("1234dad")[:64])
	//testSerializeDeserialize()

}


func Sha512HashValue(value string) string {
	hashHandler := sha512.New()
	hashHandler.Write([]byte(value))
	return strings.ToLower(hex.EncodeToString(hashHandler.Sum(nil)))
}

func makeAddress(name string) string {
	return Namespace + hexdigest(name)[:64]
}

func hexdigest(str string) string {
	hash := sha512.New()
	hash.Write([]byte(str))
	hashBytes := hash.Sum(nil)
	return strings.ToLower(hex.EncodeToString(hashBytes))
}

func testSerializeDeserialize() {
	auction1 := state.AuctionTable{}

	auction1.Item = state.Item{
		ID:          "123",
		Name:        "auction1",
		Description: "description1",
		PostTime:    "timePo1",
		ExpiryTime:  "timeExp1",
	}

	b11 := state.Bid{
		ID:         "123bid1",
		BidderName: "123name1",
		Amount:     "123amount1",
		Timestamp:  "123time1",
	}
	b12 := state.Bid{
		ID:         "123bid2",
		BidderName: "123name2",
		Amount:     "123amount2",
		Timestamp:  "123time2",
	}
	auction1.Bids = []state.Bid{}
	auction1.Bids = append(auction1.Bids, b11)
	auction1.Bids = append(auction1.Bids, b12)

	auction2 := state.AuctionTable{}

	auction2.Item = state.Item{
		ID:          "456",
		Name:        "auction2",
		Description: "description2",
		PostTime:    "timePo2",
		ExpiryTime:  "timeExp2",
	}

	b21 := state.Bid{
		ID:         "456bid",
		BidderName: "456name1",
		Amount:     "456amount1",
		Timestamp:  "456time1",
	}
	b22 := state.Bid{
		ID:         "456bid2",
		BidderName: "456name2",
		Amount:     "456amount2",
		Timestamp:  "456time2",
	}
	auction2.Bids = []state.Bid{}
	auction2.Bids = append(auction2.Bids, b21)
	auction2.Bids = append(auction2.Bids, b22)

	var auctions []*state.AuctionTable
	auctions = append(auctions, &auction1)
	auctions = append(auctions, &auction2)

	bytes := state.Serialize(auctions)

	var auctions2 map[string]*state.AuctionTable

	auctions2, _ = state.Deserialize(bytes)

	var auctions3 []*state.AuctionTable
	for _, v := range auctions2 {
		auctions3 = append(auctions3, v)
	}

	bytes2 := state.Serialize(auctions3)

	if string(bytes) == string(bytes2) {
		fmt.Println("Test serialize and deserialize ok!")
	}

}
